package repository

import (
	"errors"
	"strconv"

	resty "github.com/go-resty/resty/v2"
	jsoniter "github.com/json-iterator/go"
	"github.com/usual2970/gopkg/conf"
	"github.com/usual2970/userhub/domain"
)

const githubAccessTokenUrl = "https://github.com/login/oauth/access_token"
const githubUserInfoUrl = "https://api.github.com/user"

type GithubRepository struct {
	clientId     string
	clientSecret string
}

type GithubOption func(repo *GithubRepository)

func WithClientId(clientId string) GithubOption {
	return func(repo *GithubRepository) {
		repo.clientId = clientId
	}
}

func WithClientSecret(clientSecret string) GithubOption {
	return func(repo *GithubRepository) {
		repo.clientSecret = clientSecret
	}
}

func NewGithubRepository(options ...GithubOption) domain.IGithubRepository {

	repo := &GithubRepository{
		clientId:     conf.GetString("github.auth.client_id"),
		clientSecret: conf.GetString("github.auth.client_secret"),
	}

	for _, option := range options {
		option(repo)
	}

	return repo
}

type GithubAccessTokenReq struct {
	ClientId     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
	Code         string `json:"code"`
}

type GithubErrResp struct {
	Error            string `json:"error"`
	ErrorDescription string `json:"error_description"`
	ErrorUri         string `json:"error_uri"`
}

func (r *GithubRepository) GetAccessToken(code string) (*domain.GithubAccessTokenResp, error) {
	client := resty.New()
	res, err := client.R().
		SetHeader("Accept", "application/json").
		SetHeader("ContentType", "application/json").
		SetBody(&GithubAccessTokenReq{
			ClientId:     r.clientId,
			ClientSecret: r.clientSecret,
			Code:         code,
		}).Post(githubAccessTokenUrl)
	if err != nil {
		return nil, err
	}

	body := res.Body()

	rs := &domain.GithubAccessTokenResp{}
	if err := jsoniter.Unmarshal(body, rs); err != nil {
		return nil, err
	}

	if rs.AccessToken == "" {
		ghErr := &GithubErrResp{}
		jsoniter.Unmarshal(body, ghErr)
		return nil, errors.New(ghErr.Error)
	}

	return rs, nil
}

// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

type GithubUserResp struct {
	Login                   string `json:"login"`
	ID                      int64  `json:"id"`
	NodeID                  string `json:"node_id"`
	AvatarURL               string `json:"avatar_url"`
	GravatarID              string `json:"gravatar_id"`
	URL                     string `json:"url"`
	HTMLURL                 string `json:"html_url"`
	FollowersURL            string `json:"followers_url"`
	FollowingURL            string `json:"following_url"`
	GistsURL                string `json:"gists_url"`
	StarredURL              string `json:"starred_url"`
	SubscriptionsURL        string `json:"subscriptions_url"`
	OrganizationsURL        string `json:"organizations_url"`
	ReposURL                string `json:"repos_url"`
	EventsURL               string `json:"events_url"`
	ReceivedEventsURL       string `json:"received_events_url"`
	Type                    string `json:"type"`
	SiteAdmin               bool   `json:"site_admin"`
	Name                    string `json:"name"`
	Company                 string `json:"company"`
	Blog                    string `json:"blog"`
	Location                string `json:"location"`
	Email                   string `json:"email"`
	Hireable                string `json:"hireable"`
	Bio                     string `json:"bio"`
	TwitterUsername         string `json:"twitter_username"`
	PublicRepos             int64  `json:"public_repos"`
	PublicGists             int64  `json:"public_gists"`
	Followers               int64  `json:"followers"`
	Following               int64  `json:"following"`
	CreatedAt               string `json:"created_at"`
	UpdatedAt               string `json:"updated_at"`
	PrivateGists            int64  `json:"private_gists"`
	TotalPrivateRepos       int64  `json:"total_private_repos"`
	OwnedPrivateRepos       int64  `json:"owned_private_repos"`
	DiskUsage               int64  `json:"disk_usage"`
	Collaborators           int64  `json:"collaborators"`
	TwoFactorAuthentication bool   `json:"two_factor_authentication"`
	Plan                    Plan   `json:"plan"`
}

type Plan struct {
	Name          string `json:"name"`
	Space         int64  `json:"space"`
	Collaborators int64  `json:"collaborators"`
	PrivateRepos  int64  `json:"private_repos"`
}

type GithubUserErrResp struct {
	Message          string `json:"message"`
	DocumentationUrl string `json:"documentation_url"`
}

func (r *GithubRepository) UserInfo(accessToken, openid string) (*domain.GithubUserInfoResp, error) {
	client := resty.New()
	res, err := client.R().
		SetHeader("Accept", "application/json").
		SetAuthToken(accessToken).
		Get(githubUserInfoUrl)
	if err != nil {
		return nil, err
	}
	ghResp := &GithubUserResp{}
	body := res.Body()
	if err := jsoniter.Unmarshal(body, ghResp); err != nil {
		return nil, err
	}

	if ghResp.ID == 0 {
		ghErr := &GithubUserErrResp{}
		jsoniter.Unmarshal(body, ghErr)
		return nil, errors.New(ghErr.Message)
	}

	rs := &domain.GithubUserInfoResp{
		Nickname:   ghResp.Login,
		Headimgurl: ghResp.AvatarURL,
		Openid:     strconv.Itoa(int(ghResp.ID)),
	}

	return rs, nil
}
